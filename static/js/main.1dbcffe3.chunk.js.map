{"version":3,"sources":["assets/hiss.svg","redux/actions/authActions.ts","Pages/Login/Login.tsx","Pages/Selection/Selection.tsx","Routes.tsx","serviceWorker.ts","redux/reducers/authReducer.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx"],"names":["module","exports","Login","props","emailHandler","event","setState","email","target","value","passwordHandler","password","bind","state","submitColor","this","login","then","error","console","log","userData","data","token","style","pageContainer","formContainer","titleContainer","logoContainer","src","require","fontSize","type","placeholder","onChange","inputContainer","Button","onClick","submitContainer","backgroundColor","React","PureComponent","display","marginLeft","height","width","alignItems","marginTop","marginBottom","flexDirection","paddingLeft","paddingRight","color","connect","isLoggedIn","auth","isLoading","dispatch","axios","post","headers","response","catch","loginFailed","actions","Selection","Routes","path","process","component","Component","Boolean","window","location","hostname","match","INITIAL_STATE","undefined","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dbcffe3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hiss.768b0a92.svg\";","import axios from 'axios';\nimport { AppActions } from '../../types/actions';\nimport { Dispatch } from \"redux\";\n\nexport const isLoading = ( loading: boolean ): AppActions => ({\n  type: 'LOGIN_ATTEMPT',\n  isLoading: loading\n});\n\nexport const loginSuccess = ( userData: object ): AppActions => ({\n  type: 'LOGIN_SUCCESS',\n  userData\n});\n\nexport const loginFailed = ( error: object ): AppActions => ({\n  type: 'LOGIN_FAILED',\n  error\n});\n//\n// export const logoutComplete = (): AppActions => ({\n//   type: 'LOGOUT_COMPLETE'\n// });\n\nexport function logout() {\n  return dispatch => {\n    //dispatch(logoutComplete());\n    //Actions.replace('login');\n  };\n};\n\nexport const login = (email: string, password: string) => {\n  return (dispatch: Dispatch<AppActions>) => {\n    // dispatch(isLoading(true));\n\n    return axios.post(\n      'https://register.tamuhack.com/api/volunteer/login',\n      {\n         email: email,\n         password: password,\n      },\n      {\n         headers: {\n           'content-type': 'application/json',\n         }\n      }\n    ).then(response => {\n      dispatch(loginSuccess(response));\n    }).catch(error => {\n      dispatch(loginFailed(error));\n    });\n  };\n};\n","import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/authActions';\nimport { LoginData } from '../../types/LoginType';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  userData: LoginData;\n  error: string;\n  login: (email: string, password: string) => Promise<object>;\n}\n\ninterface IState {\n  email: string;\n  password: string;\n  submitColor: string;\n}\n\nclass Login extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.emailHandler = this.emailHandler.bind(this);\n    this.passwordHandler = this.passwordHandler.bind(this);\n    this.state = {email: \"\", password: \"\", submitColor: '#FF7C93'};\n  }\n\n  login() {\n    this.props.login(this.state.email, this.state.password).then(() => {\n      if(this.props.error) {\n        // Alert user about error\n        console.log(this.props);\n      } else {\n        // Switch to next Apply screen\n        console.log(this.props.userData.data.token);\n      }\n    });\n  }\n\n  emailHandler = (event) => {\n    this.setState({ email: event.target.value });\n  }\n\n  passwordHandler = (event) => {\n    this.setState({ password: event.target.value });\n  }\n\n  render() {\n    return (\n      <div style={style.pageContainer}>\n        <form style={style.formContainer}>\n          <div style={style.titleContainer}>\n            <img\n              style={style.logoContainer}\n              src={require(\"../../assets/hiss.svg\")}\n            />\n            <p style={{ fontSize: '18px' }}>by tamuhack</p>\n          </div>\n          <input\n            type='text'\n            placeholder='Email'\n            value={this.state.email}\n            onChange={this.emailHandler}\n            style={style.inputContainer}\n          />\n          <input\n            type='password'\n            placeholder='Password'\n            value={this.state.password}\n            onChange={this.passwordHandler}\n            style={style.inputContainer}\n          />\n          <Button\n            onClick={() => this.login()}\n            style={{...style.submitContainer, backgroundColor: this.state.submitColor}}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst style : { [key: string]: React.CSSProperties } = {\n  logoContainer : {\n    display: 'flex',\n    marginLeft: '-10px',\n    height: '56px'\n  },\n  pageContainer : {\n    display: 'flex',\n    height: '100vh',\n    width: '100vw',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    marginTop: '27vh',\n    marginBottom: '40px',\n    width: '80vw'\n  },\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100vw',\n    paddingLeft: '10vw',\n    paddingRight: '10vw',\n    height: '100vh',\n  },\n  inputContainer: {\n    height: '57px',\n    width: '80vw',\n    paddingLeft: '4%',\n    marginBottom: '3vh',\n    fontSize: 17\n  },\n  submitContainer: {\n    height: '57px',\n    width: '80vw',\n    marginTop: '3vh',\n    color: 'white',\n    fontSize: 20\n  },\n};\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.auth.isLoggedIn,\n  isLoading: state.auth.isLoading,\n  userData: state.auth.userData,\n  error: state.auth.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email:string, password:string) => dispatch(actions.login(email, password))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/authActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n  event: string;\n  attribute: string;\n}\n\ninterface IState {\n  event: string;\n  attribute: string;\n}\n\nclass Selection extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div style={style.pageContainer}>\n        Hello!\n      </div>\n    );\n  }\n}\n\nconst style : { [key: string]: React.CSSProperties } = {\n  pageContainer : {\n    display: 'flex',\n    height: '100vh',\n    width: '100vw',\n    alignItems: 'center',\n  },\n};\n\nconst mapStateToProps = state => ({\n  /*event: state.selection.eventName,\n  attribute: state.selection.attribute,*/\n});\n\nconst mapDispatchToProps = dispatch => ({\n  /*login: (email:string, password:string) => dispatch(actions.login(email, password))*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Router } from 'react-router-dom';\nimport Login from './Pages/Login/Login';\nimport QRScan from './Pages/QRScan/QRScan';\nimport Selection from './Pages/Selection/Selection';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path={process.env.PUBLIC_URL + '/test'} component={Selection} />\n          <Route path={process.env.PUBLIC_URL + '/'} component={Login} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AuthActionTypes } from '../../types/actions';\n\nconst INITIAL_STATE: object = {\n  isLoggedIn: false,\n  isLoading: false,\n  userData: {},\n  error: undefined\n};\n\nexport default function auth(state = INITIAL_STATE, action: AuthActionTypes): object {\n  console.log(action.type);\n  switch (action.type) {\n    case 'LOGIN_ATTEMPT':\n      return {\n        ...state,\n        isLoading: true,\n        isLoggedIn: false\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: true,\n        userData: action.userData,\n        error: undefined\n      };\n    case 'LOGIN_FAILED':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: false,\n        error: action.error\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        userData: {},\n        isLoading: false,\n        isLoggedIn: false\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './authReducer';\n\nconst rootReducer = combineReducers({\n  auth\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport Login from './Pages/Login/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst ReduxApp = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  )\n}\n\nReactDOM.render(<ReduxApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}