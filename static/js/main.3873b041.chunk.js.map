{"version":3,"sources":["assets/hiss.svg","Login/Login.js","redux/actions/authActions.js","serviceWorker.js","redux/reducers/authReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","Login","props","emailHandler","event","console","log","target","value","setState","email","passwordHandler","password","state","delay","result","submitClr","this","login","data","err","error","style","styles","pageContainer","formContainer","onSubmit","formHandler","titleContainer","logoContainer","src","require","fontSize","type","placeholder","onChange","inputContainer","Button","onClick","submitContainer","backgroundColor","Component","display","marginLeft","height","width","alignItems","marginTop","marginBottom","flexDirection","paddingLeft","paddingRight","color","stripe","position","bottom","connect","isLoggedIn","auth","isLoading","userData","dispatch","axios","post","headers","then","response","catch","loginFailed","Boolean","window","location","hostname","match","INITIAL_STATE","undefined","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,kC,suBCSrCC,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAyBRC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEC,MAAON,EAAMG,OAAOC,SA5BpB,EA+BlBG,gBAAkB,SAACP,GACjBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEG,SAAUR,EAAMG,OAAOC,SA/BvC,EAAKK,MAAQ,CACXC,MAAO,IACPC,OAAQ,YACRL,MAAO,GACPE,SAAU,GACVI,UAAW,WAPG,E,qEAahBC,KAAKf,MAAMgB,U,iCAGFC,GACTF,KAAKR,SAAS,CACZM,OAAQI,M,kCAIAC,GACVf,QAAQgB,MAAMD,K,+BAaN,IAAD,OACP,OACE,yBAAKE,MAAOC,EAAOC,eACjB,0BAAMF,MAAOC,EAAOE,cAAeC,SAAUT,KAAKU,aAChD,yBAAKL,MAAOC,EAAOK,gBACjB,yBACEN,MAAOC,EAAOM,cACdC,IAAKC,EAAQ,MAEf,uBAAGT,MAAO,CAAEU,SAAU,SAAtB,gBAEF,2BACEC,KAAK,OACLC,YAAY,QACZ1B,MAAOS,KAAKJ,MAAMH,MAClByB,SAAUlB,KAAKd,aACfmB,MAAOC,EAAOa,iBAEhB,2BACEH,KAAK,WACLC,YAAY,WACZ1B,MAAOS,KAAKJ,MAAMD,SAClBuB,SAAUlB,KAAKN,gBACfW,MAAOC,EAAOa,iBAEhB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKpB,SACpBI,MAAK,KAAMC,EAAOgB,gBAAb,CAA8BC,gBAAiBvB,KAAKJ,MAAMG,aAFjE,e,GA9DUyB,aA0EdlB,EAAS,CACXM,cAAgB,CACda,QAAS,OACTC,WAAY,QACZC,OAAQ,QAEVpB,cAAgB,CACdkB,QAAS,OACTE,OAAQ,QACRC,MAAO,QACPC,WAAY,UAEdlB,eAAgB,CACdmB,UAAW,OACXC,aAAc,OACdH,MAAO,QAETpB,cAAe,CACbiB,QAAS,OACTO,cAAe,SACfH,WAAY,SACZD,MAAO,QACPK,YAAa,OACbC,aAAc,OACdP,OAAQ,SAEVR,eAAgB,CACdQ,OAAQ,OACRC,MAAO,OACPK,YAAa,KACbF,aAAc,MACdhB,SAAU,IAEZO,gBAAiB,CACfK,OAAQ,OACRC,MAAO,OACPE,UAAW,MACXK,MAAO,QACPpB,SAAU,IAEZqB,OAAQ,CACNC,SAAU,WACVT,MAAO,OACPU,QAAS,MAeAC,eAXS,SAAA3C,GAAK,MAAK,CAChC4C,WAAY5C,EAAM6C,KAAKD,WACvBE,UAAW9C,EAAM6C,KAAKC,UACtBC,SAAU/C,EAAM6C,KAAKE,SACrBvC,MAAOR,EAAM6C,KAAKrC,UAGO,SAAAwC,GAAQ,MAAK,CACtC3C,MAAO,kBAAM2C,GCpGN,SAAAA,GAGL,OAAOC,IAAMC,KACX,gDACA,CACGrD,MAAOS,EAAKT,MACZE,SAAUO,EAAKP,UAElB,CACGoD,QAAS,CACP,eAAgB,sBAGrBC,MAAK,SAAAC,GACL7D,QAAQC,IAAI4D,GACZL,EA5CG,CACL5B,KAAM,gBACN2B,SA0CwBM,OACrBC,OAAM,SAAA9C,GACPhB,QAAQC,IAAIe,GACZwC,EAzCC,SAAqBxC,GAC1B,MAAO,CACLY,KAAM,eACNZ,SAsCW+C,CAAY/C,UArBpB,IAAeF,MDyGPqC,CAA6CvD,GEjIxCoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4kBClBN,IAAMC,EAAgB,CACpBjB,YAAY,EACZE,WAAW,EACXC,SAAU,GACVvC,WAAOsD,GCDT,IAIeC,EAJKC,YAAgB,CAClCnB,KDGa,WAA8C,IAAhC7C,EAA+B,uDAAvB6D,EAAeI,EAAQ,uCAE1D,OADAzE,QAAQC,IAAIwE,EAAO7C,MACX6C,EAAO7C,MACb,IAAK,gBACH,OAAO,KACFpB,EADL,CAEE8C,WAAW,EACXF,YAAY,IAEhB,IAAK,gBACH,OAAO,KACF5C,EADL,CAEE8C,WAAW,EACXF,YAAY,EACZG,SAAUkB,EAAOlB,SACjBvC,WAAOsD,IAEX,IAAK,eACH,OAAO,KACF9D,EADL,CAEE8C,WAAW,EACXF,YAAY,EACZpC,MAAOyD,EAAOzD,QAElB,IAAK,SACH,OAAO,KACFR,EADL,CAEE+C,SAAU,GACVD,WAAW,EACXF,YAAY,IAEhB,QACE,OAAO5C,MEjCEkE,EAFDC,YAAYJ,EAAaK,YAAgBC,MCYvDC,IAASC,OAAO,mBARC,WACf,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,SAKU,MAAcM,SAASC,eAAe,SJiHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.3873b041.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hiss.768b0a92.svg\";","import React, { Component } from 'react';\nimport { View } from 'react';\nimport QrReader from 'react-qr-reader';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions/authActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass Login extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      delay: 100,\n      result: 'No result',\n      email: '',\n      password: '',\n      submitClr: '#FF7C93'\n    };\n    //this.handleScan = this.handleScan.bind(this);\n  }\n\n  login() {\n    this.props.login();\n  }\n\n  handleScan(data){\n    this.setState({\n      result: data,\n    })\n  }\n\n  handleError(err){\n    console.error(err)\n  }\n\n  emailHandler = (event) => {\n    console.log(event.target.value);\n    this.setState({ email: event.target.value });\n  }\n\n  passwordHandler = (event) => {\n    console.log(event.target.value);\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    return(\n      <div style={styles.pageContainer}>\n        <form style={styles.formContainer} onSubmit={this.formHandler}>\n          <div style={styles.titleContainer}>\n            <img\n              style={styles.logoContainer}\n              src={require(\"../assets/hiss.svg\")}\n            />\n            <p style={{ fontSize: '18px' }}>by tamuhack</p>\n          </div>\n          <input\n            type='text'\n            placeholder='Email'\n            value={this.state.email}\n            onChange={this.emailHandler}\n            style={styles.inputContainer}\n          />\n          <input\n            type='password'\n            placeholder='Password'\n            value={this.state.password}\n            onChange={this.passwordHandler}\n            style={styles.inputContainer}\n          />\n          <Button\n            onClick={() => this.login()}\n            style={{...styles.submitContainer, backgroundColor: this.state.submitClr}}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n    logoContainer : {\n      display: 'flex',\n      marginLeft: '-10px',\n      height: '56px'\n    },\n    pageContainer : {\n      display: 'flex',\n      height: '100vh',\n      width: '100vw',\n      alignItems: 'center',\n    },\n    titleContainer: {\n      marginTop: '27vh',\n      marginBottom: '40px',\n      width: '80vw'\n    },\n    formContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: '100vw',\n      paddingLeft: '10vw',\n      paddingRight: '10vw',\n      height: '100vh',\n    },\n    inputContainer: {\n      height: '57px',\n      width: '80vw',\n      paddingLeft: '4%',\n      marginBottom: '3vh',\n      fontSize: 17\n    },\n    submitContainer: {\n      height: '57px',\n      width: '80vw',\n      marginTop: '3vh',\n      color: 'white',\n      fontSize: 20\n    },\n    stripe: {\n      position: 'absolute',\n      width: '70vw',\n      bottom: -1000\n    }\n};\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.auth.isLoggedIn,\n  isLoading: state.auth.isLoading,\n  userData: state.auth.userData,\n  error: state.auth.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  login: () => dispatch(actions.login())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import axios from 'axios';\n\nexport function isLoading(bool) {\n  return {\n    type: 'LOGIN_ATTEMPT',\n    isLoading: bool\n  };\n}\n\nexport function loginSuccess(userData) {\n  return {\n    type: 'LOGIN_SUCCESS',\n    userData\n  };\n}\n\nexport function loginFailed(error) {\n  return {\n    type: 'LOGIN_FAILED',\n    error\n  };\n}\n\nexport function logoutComplete() {\n  return {\n    type: 'LOGOUT'\n  };\n}\n\nexport function logout() {\n  return dispatch => {\n    dispatch(logoutComplete());\n    //Actions.replace('login');\n  };\n}\n\nexport function login(data) {\n\n  return dispatch => {\n    // dispatch(isLoading(true));\n\n    return axios.post(\n      'https://register.tamuhack.com/volunteer/login',\n      {\n         email: data.email,\n         password: data.password,\n      },\n      {\n         headers: {\n           'content-type': 'application/json',\n         }\n      }\n    ).then(response => {\n      console.log(response);\n      dispatch(loginSuccess(response));\n    }).catch(error => {\n      console.log(error);\n      dispatch(loginFailed(error));\n    });\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n  isLoggedIn: false,\n  isLoading: false,\n  userData: {},\n  error: undefined\n};\n\nexport default function auth(state = INITIAL_STATE, action) {\n  console.log(action.type);\n  switch (action.type) {\n    case 'LOGIN_ATTEMPT':\n      return {\n        ...state,\n        isLoading: true,\n        isLoggedIn: false\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: true,\n        userData: action.userData,\n        error: undefined\n      };\n    case 'LOGIN_FAILED':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: false,\n        error: action.error\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        userData: {},\n        isLoading: false,\n        isLoggedIn: false\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './authReducer';\n\nconst rootReducer = combineReducers({\n  auth\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Login from './Login/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst ReduxApp = () => {\n  return (\n    <Provider store={store}>\n      <Login />\n    </Provider>\n  )\n}\n\nReactDOM.render(<ReduxApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}