{"version":3,"sources":["assets/hiss.svg","redux/actions/authActions.ts","Pages/Login/Login.tsx","Pages/Selection/Selection.tsx","Pages/Routes.tsx","serviceWorker.ts","redux/reducers/authReducer.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx"],"names":["module","exports","Login","props","emailHandler","event","setState","email","target","value","passwordHandler","password","bind","state","submitColor","redirectToSelection","this","login","then","error","console","log","to","style","pageContainer","formContainer","titleContainer","logoContainer","src","require","fontSize","type","placeholder","onChange","inputContainer","Button","onClick","submitContainer","backgroundColor","React","PureComponent","display","marginLeft","height","width","alignItems","marginTop","marginBottom","flexDirection","paddingLeft","paddingRight","color","connect","isLoggedIn","auth","isLoading","userData","dispatch","axios","post","headers","response","catch","loginFailed","actions","Selection","eventSelectChange","option","val","attributeSelectChange","attribute","determineAttributes","label","handleScanSubmit","attributeOptions","formatGroupLabel","data","groupStyles","groupBadgeStyles","options","length","isClearable","isSearchable","isDisabled","block","border","disabled","padding","borderRadius","fontWeight","lineHeight","minWidth","textAlign","justifyContent","Routes","basename","path","component","Component","Boolean","window","location","hostname","match","INITIAL_STATE","undefined","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,qLC8BpC,ICNDC,E,YACJ,WAAYC,GAAgB,IAAD,8BACzB,4CAAMA,KAmBRC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOC,SArBX,EAwB3BC,gBAAkB,SAACL,GACjB,EAAKC,SAAS,CAAEK,SAAUN,EAAMG,OAAOC,SAtBvC,EAAKL,aAAe,EAAKA,aAAaQ,KAAlB,gBACpB,EAAKF,gBAAkB,EAAKA,gBAAgBE,KAArB,gBACvB,EAAKC,MAAQ,CAACN,MAAO,GAAII,SAAU,GAAIG,YAAa,UAAWC,qBAAqB,GAL3D,E,qEAQlB,IAAD,OACNC,KAAKb,MAAMc,MAAMD,KAAKH,MAAMN,MAAOS,KAAKH,MAAMF,UAAUO,MAAK,WACxD,EAAKf,MAAMgB,MAEZC,QAAQC,IAAI,EAAKlB,OAGjB,EAAKG,SAAS,CAAES,qBAAqB,S,+BAajC,IAAD,OAGP,OAFgCC,KAAKH,MAA7BE,oBAGC,kBAAC,IAAD,CAAUO,GAAG,UAIpB,yBAAKC,MAAOA,EAAMC,eAChB,0BAAMD,MAAOA,EAAME,eACjB,yBAAKF,MAAOA,EAAMG,gBAChB,yBACEH,MAAOA,EAAMI,cACbC,IAAKC,EAAQ,MAEf,uBAAGN,MAAO,CAAEO,SAAU,SAAtB,gBAEF,2BACEC,KAAK,OACLC,YAAY,QACZvB,MAAOO,KAAKH,MAAMN,MAClB0B,SAAUjB,KAAKZ,aACfmB,MAAOA,EAAMW,iBAEf,2BACEH,KAAK,WACLC,YAAY,WACZvB,MAAOO,KAAKH,MAAMF,SAClBsB,SAAUjB,KAAKN,gBACfa,MAAOA,EAAMW,iBAEf,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKnB,SACpBM,MAAK,eAAMA,EAAMc,gBAAZ,CAA6BC,gBAAiBtB,KAAKH,MAAMC,eAFhE,e,GA5DUyB,IAAMC,eAwEpBjB,EAAiD,CACrDI,cAAgB,CACdc,QAAS,OACTC,WAAY,QACZC,OAAQ,QAEVnB,cAAgB,CACdiB,QAAS,OACTE,OAAQ,QACRC,MAAO,QACPC,WAAY,UAEdnB,eAAgB,CACdoB,UAAW,OACXC,aAAc,OACdH,MAAO,QAETnB,cAAe,CACbgB,QAAS,OACTO,cAAe,SACfH,WAAY,SACZD,MAAO,QACPK,YAAa,OACbC,aAAc,OACdP,OAAQ,SAEVT,eAAgB,CACdS,OAAQ,OACRC,MAAO,OACPK,YAAa,KACbF,aAAc,MACdjB,SAAU,IAEZO,gBAAiB,CACfM,OAAQ,OACRC,MAAO,OACPE,UAAW,MACXK,MAAO,QACPrB,SAAU,KAeCsB,eAXS,SAAAvC,GAAK,MAAK,CAChCwC,WAAYxC,EAAMyC,KAAKD,WACvBE,UAAW1C,EAAMyC,KAAKC,UACtBC,SAAU3C,EAAMyC,KAAKE,SACrBrC,MAAON,EAAMyC,KAAKnC,UAGO,SAAAsC,GAAQ,MAAK,CACtCxC,MAAO,SAACV,EAAcI,GAAf,OAAmC8C,EDpHvB,SAAClD,EAAeI,GACnC,OAAO,SAAC8C,GAGN,OAAOC,IAAMC,KACX,oDACA,CACGpD,MAAOA,EACPI,SAAUA,GAEb,CACGiD,QAAS,CACP,eAAgB,sBAGrB1C,MAAK,SAAA2C,GACLJ,EArC2D,CAC/D1B,KAAM,gBACNyB,SAmC0BK,OACrBC,OAAM,SAAA3C,GACPsC,EAlCqB,SAAEtC,GAAF,MAAkC,CAC3DY,KAAM,eACNZ,SAgCa4C,CAAY5C,QCkG0B6C,CAAczD,EAAOI,QAG3DyC,CAA6ClD,G,QCnItD+D,E,YACJ,WAAY9D,GAAgB,IAAD,8BACzB,4CAAMA,KAUR+D,kBAAoB,SAACC,EAAQH,GAC3B,IAAII,EAAMD,EAASA,EAAO1D,MAAQ,GAClC,EAAKH,SAAS,CACZD,MAAO+D,KAdgB,EAmB3BC,sBAAwB,SAACF,EAAQH,GAC/B,IAAII,EAAMD,EAASA,EAAO1D,MAAQ,GAClC,EAAKH,SAAS,CACZgE,UAAWF,KAtBY,EA4B3BG,oBAAsB,WAEpB,MAAO,CACL,CAAE9D,MAAO,YAAa+D,MAAO,WAC7B,CAAE/D,MAAO,aAAc+D,MAAO,WAC9B,CAAE/D,MAAO,UAAW+D,MAAO,aAjCJ,EAqC3BC,iBAAmB,WACd,EAAK5D,MAAMR,OAAS,EAAKQ,MAAMyD,WAEhClD,QAAQC,IAAI,+BArCd,EAAKR,MAAQ,CACXR,MAAO,GACPiE,UAAW,IALY,E,sEA4CjB,IAAD,EAIHtD,KAAKH,MAFPR,EAFK,EAELA,MACAiE,EAHK,EAGLA,UAUII,EAAmB1D,KAAKuD,sBAGxBI,EAAmB,SAAAC,GAAI,OAC3B,yBAAKrD,MAAOA,EAAMsD,aAChB,8BAAOD,EAAKJ,OACZ,0BAAMjD,MAAOA,EAAMuD,kBAAmBF,EAAKG,QAAQC,UAKvD,OACE,yBAAKzD,MAAOA,EAAMC,eAChB,wBAAID,MAAO,CAAEO,SAAU,OAAQqB,MAAO,UAAWJ,aAAc,SAA/D,oBAKA,kBAAC,IAAD,CACEgC,QAzBe,CACnB,CAAEtE,MAAO,YAAa+D,MAAO,aAC7B,CAAE/D,MAAO,aAAc+D,MAAO,cAC9B,CAAE/D,MAAO,UAAW+D,MAAO,YAuBvBG,iBAAkBA,EAClB3C,YAAY,QACZiD,aAAa,EACbC,cAAe,EACfjD,SAAUjB,KAAKkD,oBAEjB,6BAGA,kBAAC,IAAD,CACEa,QAASL,EACTC,iBAAkBA,EAClB3C,YAAY,YACZiD,aAAa,EACbE,WAAqB,IAAT9E,EACZ4B,SAAUjB,KAAKqD,sBACfa,cAAe,IAEjB,6BAEA,kBAAC/C,EAAA,EAAD,CAAQiD,OAAK,EACX7D,MAAO,CAAC8D,OAAQ,oBAAqB/C,gBAAiB,WACtDF,QAASpB,KAAKyD,iBACda,WAAajF,GAASiE,IAHxB,uB,GAlGgB/B,IAAMC,eA6GxBjB,EAAiD,CAGrDC,cAAgB,CACd+D,QAAS,OACTzC,UAAW,OACXF,MAAO,SAITkC,iBAAkB,CAChBxC,gBAAiB,UACjBkD,aAAc,MACdrC,MAAO,UACPV,QAAS,eACTX,SAAU,GACV2D,WAAY,SACZC,WAAY,IACZC,SAAU,EACV/C,MAAO,SACP2C,QAAS,2BACTK,UAAW,UAIbf,YAAa,CACXpC,QAAS,OACTI,WAAY,SACZgD,eAAgB,kBAaLzC,eATS,SAAAvC,GAAK,MAAK,MAKP,SAAA4C,GAAQ,MAAK,KAIzBL,CAA6Ca,GCrJ7C6B,E,iLAXX,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,UAAWC,UAAWhC,IACnC,kBAAC,IAAD,CAAO+B,KAAM,IAAKC,UAAW/F,U,GANlBqC,IAAM2D,WCMPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBAC,EAAwB,CAC5BnD,YAAY,EACZE,WAAW,EACXC,SAAU,GACVrC,WAAOsF,GCHT,IAMeC,EANKC,YAAgB,CAClCrD,KDKa,WAAuE,IAAzDzC,EAAwD,uDAAhD2F,EAAeI,EAAiC,uCAEnF,OADAxF,QAAQC,IAAIuF,EAAO7E,MACX6E,EAAO7E,MACb,IAAK,gBACH,OAAO,eACFlB,EADL,CAEE0C,WAAW,EACXF,YAAY,IAEhB,IAAK,gBACH,OAAO,eACFxC,EADL,CAEE0C,WAAW,EACXF,YAAY,EACZG,SAAUoD,EAAOpD,SACjBrC,WAAOsF,IAEX,IAAK,eACH,OAAO,eACF5F,EADL,CAEE0C,WAAW,EACXF,YAAY,EACZlC,MAAOyF,EAAOzF,QAElB,IAAK,SACH,OAAO,eACFN,EADL,CAEE2C,SAAU,GACVD,WAAW,EACXF,YAAY,IAEhB,QACE,OAAOxC,MEnCEgG,EAFDC,YAAYJ,EAAaK,YAAgBC,MCavDC,IAASC,OAAO,mBARC,WACf,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,SAKU,MAAcM,SAASC,eAAe,SJ0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrG,MAAK,SAAAsG,GACjCA,EAAaC,kB","file":"static/js/main.71795367.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hiss.768b0a92.svg\";","import axios from 'axios';\nimport { AppActions } from '../../types/actions';\nimport { Dispatch } from \"redux\";\n\nexport const isLoading = ( loading: boolean ): AppActions => ({\n  type: 'LOGIN_ATTEMPT',\n  isLoading: loading\n});\n\nexport const loginSuccess = ( userData: object ): AppActions => ({\n  type: 'LOGIN_SUCCESS',\n  userData\n});\n\nexport const loginFailed = ( error: object ): AppActions => ({\n  type: 'LOGIN_FAILED',\n  error\n});\n//\n// export const logoutComplete = (): AppActions => ({\n//   type: 'LOGOUT_COMPLETE'\n// });\n\nexport function logout() {\n  return dispatch => {\n    //dispatch(logoutComplete());\n    //Actions.replace('login');\n  };\n};\n\nexport const login = (email: string, password: string) => {\n  return (dispatch: Dispatch<AppActions>) => {\n    // dispatch(isLoading(true));\n\n    return axios.post(\n      'https://register.tamuhack.com/api/volunteer/login',\n      {\n         email: email,\n         password: password,\n      },\n      {\n         headers: {\n           'content-type': 'application/json',\n         }\n      }\n    ).then(response => {\n      dispatch(loginSuccess(response));\n    }).catch(error => {\n      dispatch(loginFailed(error));\n    });\n  };\n};\n","import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport Button from 'react-bootstrap/Button';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/authActions';\nimport { LoginData } from '../../types/LoginType';\nimport { Redirect } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  userData: LoginData;\n  error: string;\n  login: (email: string, password: string) => Promise<object>;\n}\n\ninterface IState {\n  email: string;\n  password: string;\n  submitColor: string;\n  redirectToSelection: boolean;\n}\n\nclass Login extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.emailHandler = this.emailHandler.bind(this);\n    this.passwordHandler = this.passwordHandler.bind(this);\n    this.state = {email: \"\", password: \"\", submitColor: '#FF7C93', redirectToSelection: false};\n  }\n\n  login() {\n    this.props.login(this.state.email, this.state.password).then(() => {\n      if(this.props.error) {\n        // Alert user about error\n        console.log(this.props);\n      } else {\n        // Switch to next Apply screen\n        this.setState({ redirectToSelection: true });\n      }\n    });\n  }\n\n  emailHandler = (event) => {\n    this.setState({ email: event.target.value });\n  }\n\n  passwordHandler = (event) => {\n    this.setState({ password: event.target.value });\n  }\n\n  render() {\n    const { redirectToSelection } = this.state;\n\n    if(redirectToSelection) {\n      return <Redirect to='/test' />\n    }\n\n    return (\n      <div style={style.pageContainer}>\n        <form style={style.formContainer}>\n          <div style={style.titleContainer}>\n            <img\n              style={style.logoContainer}\n              src={require(\"../../assets/hiss.svg\")}\n            />\n            <p style={{ fontSize: '18px' }}>by tamuhack</p>\n          </div>\n          <input\n            type='text'\n            placeholder='Email'\n            value={this.state.email}\n            onChange={this.emailHandler}\n            style={style.inputContainer}\n          />\n          <input\n            type='password'\n            placeholder='Password'\n            value={this.state.password}\n            onChange={this.passwordHandler}\n            style={style.inputContainer}\n          />\n          <Button\n            onClick={() => this.login()}\n            style={{...style.submitContainer, backgroundColor: this.state.submitColor}}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst style : { [key: string]: React.CSSProperties } = {\n  logoContainer : {\n    display: 'flex',\n    marginLeft: '-10px',\n    height: '56px'\n  },\n  pageContainer : {\n    display: 'flex',\n    height: '100vh',\n    width: '100vw',\n    alignItems: 'center',\n  },\n  titleContainer: {\n    marginTop: '27vh',\n    marginBottom: '40px',\n    width: '80vw'\n  },\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '100vw',\n    paddingLeft: '10vw',\n    paddingRight: '10vw',\n    height: '100vh',\n  },\n  inputContainer: {\n    height: '57px',\n    width: '80vw',\n    paddingLeft: '4%',\n    marginBottom: '3vh',\n    fontSize: 17\n  },\n  submitContainer: {\n    height: '57px',\n    width: '80vw',\n    marginTop: '3vh',\n    color: 'white',\n    fontSize: 20\n  },\n};\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.auth.isLoggedIn,\n  isLoading: state.auth.isLoading,\n  userData: state.auth.userData,\n  error: state.auth.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  login: (email:string, password:string) => dispatch(actions.login(email, password))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/authActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Select from 'react-select'\nimport Button from 'react-bootstrap/Button';\n\ninterface IProps {\n  event: string;\n  attribute: string;\n}\n\ninterface IState {\n  event: string;\n  attribute: string;\n}\n\nclass Selection extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      event: \"\",\n      attribute: \"\"\n    }\n  }\n\n  \n  // Gets called every time the first select form has an option change.\n  eventSelectChange = (option, actions) => {\n    var val = option ? option.value : \"\";\n    this.setState({\n      event: val\n    })\n  }\n\n  // Gets called every time the second select form has an option change.\n  attributeSelectChange = (option, actions) => {\n    var val = option ? option.value : \"\";\n    this.setState({\n      attribute: val\n    })\n  }\n\n  // Using the event state determine what options to return. \n  // These will be displayed on the second dropdown\n  determineAttributes = () => {\n    // TODO\n    return [\n      { value: 'chocolate', label: 'Attr. C' },\n      { value: 'strawberry', label: 'Attr. S' },\n      { value: 'vanilla', label: 'Attr. V' }\n    ]\n  }\n\n  handleScanSubmit = () => {\n    if(this.state.event && this.state.attribute) {\n      // TODO\n      console.log('Sending a POST request ...')\n    }\n  }\n\n  render() {\n    var {\n      event,\n      attribute\n    } = this.state;\n\n    // Hardcoded event options. Will need to be updated\n    const eventOptions = [\n      { value: 'chocolate', label: 'Chocolate' },\n      { value: 'strawberry', label: 'Strawberry' },\n      { value: 'vanilla', label: 'Vanilla' }\n    ]\n\n    const attributeOptions = this.determineAttributes()\n\n    // Formats the individual options in the select tags (react-select)\n    const formatGroupLabel = data => (\n      <div style={style.groupStyles}>\n        <span>{data.label}</span>\n        <span style={style.groupBadgeStyles}>{data.options.length}</span>\n      </div>\n    );\n\n\n    return (\n      <div style={style.pageContainer}>\n        <h2 style={{ fontSize: '36px', color: \"#FF7C93\", marginBottom: \"40px\" }}>\n          Select a scan...\n        </h2>\n\n        {/* React-Select component */}\n        <Select\n          options={eventOptions}\n          formatGroupLabel={formatGroupLabel}\n          placeholder=\"Event\"\n          isClearable={true}\n          isSearchable={ false }\n          onChange={this.eventSelectChange}\n        />\n        <br />\n\n        {/* React-Select component */}\n        <Select\n          options={attributeOptions}\n          formatGroupLabel={formatGroupLabel}\n          placeholder=\"Attribute\"\n          isClearable={true}\n          isDisabled={event == \"\"}\n          onChange={this.attributeSelectChange}\n          isSearchable={ false }\n        />\n        <br />\n        \n        <Button block\n          style={{border: \"1px solid #FF7C93\", backgroundColor: \"#FF7C93\"}}\n          onClick={this.handleScanSubmit}\n          disabled={! (event && attribute)}\n        >\n          Start Scanning\n        </Button>\n      </div>\n    );\n  }\n}\nconst style : { [key: string]: React.CSSProperties } = {\n\n  // Changed, no longer flex and MarginTop is hardcoded\n  pageContainer : {\n    padding: \"20px\",\n    marginTop: \"20vh\",\n    width: '100vw',\n  },\n\n  // Default React-Select styles\n  groupBadgeStyles: {\n    backgroundColor: '#EBECF0',\n    borderRadius: '2em',\n    color: '#172B4D',\n    display: 'inline-block',\n    fontSize: 12,\n    fontWeight: 'normal',\n    lineHeight: '1',\n    minWidth: 1,\n    width: \"200px;\",\n    padding: '0.16666666666667em 0.5em',\n    textAlign: 'center',\n  },\n\n  // Default React-Select styles\n  groupStyles: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }\n};\n\nconst mapStateToProps = state => ({\n  /*event: state.selection.eventName,\n  attribute: state.selection.attribute,*/\n});\n\nconst mapDispatchToProps = dispatch => ({\n  /*login: (email:string, password:string) => dispatch(actions.login(email, password))*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);","import React from 'react';\nimport { HashRouter, Switch, Route, Router } from 'react-router-dom';\nimport Login from './Login/Login';\nimport QRScan from './QRScan/QRScan';\nimport Selection from './Selection/Selection';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path={'/select'} component={Selection} />\n          <Route path={'/'} component={Login} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AuthActionTypes } from '../../types/actions';\n\nconst INITIAL_STATE: object = {\n  isLoggedIn: false,\n  isLoading: false,\n  userData: {},\n  error: undefined\n};\n\nexport default function auth(state = INITIAL_STATE, action: AuthActionTypes): object {\n  console.log(action.type);\n  switch (action.type) {\n    case 'LOGIN_ATTEMPT':\n      return {\n        ...state,\n        isLoading: true,\n        isLoggedIn: false\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: true,\n        userData: action.userData,\n        error: undefined\n      };\n    case 'LOGIN_FAILED':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: false,\n        error: action.error\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        userData: {},\n        isLoading: false,\n        isLoggedIn: false\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './authReducer';\n\nconst rootReducer = combineReducers({\n  auth\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Pages/Routes';\nimport Login from './Pages/Login/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst ReduxApp = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  )\n}\n\nReactDOM.render(<ReduxApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}