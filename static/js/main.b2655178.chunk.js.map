{"version":3,"sources":["assets/arrowright.svg","assets/isymbol.svg","assets/logout.svg","assets/magnifying.svg","Components/toast.tsx","Pages/Login/Login.tsx","redux/actions/authActions.ts","Pages/ConfirmModal/ConfirmModal.tsx","Components/navbar.tsx","Pages/QRScan/QRScan.tsx","Pages/Selection/Selection.tsx","redux/actions/selectionActions.ts","Pages/Search/Search.tsx","Pages/Routes.tsx","serviceWorker.ts","redux/reducers/authReducer.ts","redux/reducers/selectionReducer.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx","assets/hiss.svg","assets sync /^/.*/.svg$","assets/arrowleft.svg"],"names":["module","exports","commonArgs","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","Toast","props","generateToast","type","text","callback","cases","toast","info","success","warn","error","key","toLocaleLowerCase","toastOptions","this","dismiss","style","display","React","PureComponent","Login","emailHandler","event","setState","email","target","value","passwordHandler","password","bind","state","submitColor","redirectToSelection","loginFailed","loginSuccess","currentToastID","toastText","login","then","createFailureToast","createSuccessToast","to","failureToast","id","undefined","successToast","pageContainer","formContainer","titleContainer","logoContainer","src","require","fontSize","placeholder","onChange","inputContainer","Button","onClick","submitContainer","backgroundColor","marginLeft","height","width","alignItems","marginTop","marginBottom","flexDirection","paddingLeft","paddingRight","color","connect","isLoggedIn","auth","isLoading","userData","dispatch","axios","post","headers","response","catch","actions","ConfirmModal","getRegisteredStatus","a","async","checkInStatusUrl","registeredStatus","get","authorization","data","token","checked_in","console","log","checkInUser","qrData","participantRegistered","exception","isRegistered","modalContainer","visible","modalVisible","onClose","closeModal","animation","customStyles","justifyContent","badgeContainer","Badge","marginRight","padding","attribute","fontWeight","first_name","last_name","emailRow","margin","checkInStatusRow","borderColor","confirmButton","disabled","borderWidth","borderStyle","paddingTop","paddingBottom","borderBottom","border","selection","TopNavbar","redirect","redirectRoute","logout","onLeftPress","leftRedirect","onRightPress","rightRedirect","leftIconSrc","rightIconSrc","leftIcon","leftRedirectRoute","rightRedirectRoute","alt","className","rightIcon","Navbar","navSpacing","Brand","href","QRScan","handleScan","confirmVisible","qrObj","JSON","parse","Object","prototype","hasOwnProperty","call","handleError","switchCamera","frontCamera","show","hide","delay","cameraString","alignSelf","onError","onScan","facingMode","switchCameraContainer","selectionContainer","Selection","eventSelectChange","option","val","attributeSelectChange","determineAttributes","label","handleScanSubmit","updateSelection","redirectToScan","attributeOptions","formatGroupLabel","groupStyles","groupBadgeStyles","options","length","isClearable","isSearchable","isDisabled","block","borderRadius","lineHeight","minWidth","textAlign","selectionSuccess","showModal","setParticipantData","user","participantData","nameHandler","name","handlePopup","handleSearchSubmit","responseData","results","createWarningToast","displayUsers","users","searchFailed","searchSuccess","warningToast","InputGroup","FormControl","size","map","index","borderTop","float","viewBox","d","fill","Routes","basename","path","component","Search","Component","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve"],"mappings":"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","file":"static/js/main.b2655178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrowright.354874ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/isymbol.3c20c3ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.354874ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/magnifying.0874efde.svg\";","import { toast, ToastContainer } from 'react-toastify';\r\nimport React from 'react';\r\n\r\n/*\r\n    Example: <Toast type=\"error\" text=\"Failed to login.\" id={this.state.currentToastID}/>\r\n    https://fkhadra.github.io/react-toastify/\r\n    types:\r\n        info -> light blue\r\n        success -> green\r\n        warning > yellow\r\n        error -> red\r\n        default -> white\r\n    text: What the toast displays\r\n    id: Needed to keep track of toasts and make sure each are unique. \r\n*/\r\n\r\n// Arguments every toast will have.\r\nvar commonArgs : object = {\r\n    position: \"bottom-center\",\r\n    autoClose: 1500,\r\n    hideProgressBar: true,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true\r\n}\r\n\r\ninterface IProps {\r\n    type: string;\r\n    text: string;\r\n    id: number;\r\n    callback?: any;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass Toast extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  // Given the props create the needed toast initializer\r\n  generateToast = () => {\r\n    var {\r\n        type,\r\n        text,\r\n        callback\r\n    } = this.props\r\n\r\n\r\n    // var commonArgsModified = JSON.parse(JSON.stringify(commonArgs));\r\n\r\n    // if(this.state.callback)\r\n    commonArgs[\"onClose\"] = callback;\r\n\r\n    var cases = {\r\n        \"info\": () => toast.info(text, commonArgs),\r\n        \"success\": () => toast.success(text, commonArgs),\r\n        \"warning\": () => toast.warn(text, commonArgs),\r\n        \"error\": () => toast.error(text, commonArgs)\r\n    }\r\n\r\n    var key = type.toLocaleLowerCase();\r\n\r\n\r\n    // Check if key one of the valid ones above, or return default toast (white background)\r\n    return (key in cases) ? cases[key] : () => toast(text, commonArgs)\r\n  }\r\n\r\n  render() {\r\n    // Get toast initializer\r\n    const toastOptions = this.generateToast();\r\n\r\n    toast.dismiss();  // <-- Remove all current toasts\r\n\r\n    // Return a toast inside a toast container to parent component\r\n    return (\r\n        <div>\r\n            <span style={{display: \"none\"}}>\r\n                {/* I shouldn't need this, but react inserts random text that I hid here. */}\r\n                {toastOptions()}\r\n            </span>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toast\r\n","import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions/authActions';\r\nimport { LoginData } from '../../types/TypeObjects';\r\nimport { Redirect } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import {generateToast} from './../../Components/toast';\r\nimport Toast from './../../Components/toast';\r\n\r\ninterface IProps {\r\n  isLoggedIn: boolean;\r\n  isLoading: boolean;\r\n  userData: LoginData;\r\n  error: string;\r\n  login: (email: string, password: string) => Promise<object>;\r\n  logout: () => void;\r\n}\r\n\r\ninterface IState {\r\n  email: string;\r\n  password: string;\r\n  submitColor: string;\r\n  redirectToSelection: boolean;\r\n\r\n  // Added state for the toast\r\n  loginFailed: boolean;\r\n  loginSuccess: boolean;\r\n  currentToastID: number;\r\n  toastText: string;\r\n}\r\n\r\nclass Login extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.emailHandler = this.emailHandler.bind(this);\r\n    this.passwordHandler = this.passwordHandler.bind(this);\r\n    this.state = {\r\n      email: \"\", \r\n      password: \"\", \r\n      submitColor: '#FF7C93', \r\n      redirectToSelection: false, \r\n      loginFailed: false, \r\n      loginSuccess: false,\r\n      currentToastID: 0, \r\n      toastText: \"\"\r\n    };\r\n    // this.props.logout();\r\n  }\r\n\r\n  createFailureToast() {\r\n    // Create a new toast by toggling the state\r\n    this.setState({\r\n      loginFailed: true,\r\n      loginSuccess: false,\r\n      toastText: \"Failed to login!\",\r\n      // Toasts need a unique ID to know when to render\r\n      currentToastID: this.state.currentToastID + 1\r\n    })\r\n  }\r\n\r\n  createSuccessToast() {\r\n    // Create a new toast by toggling the state\r\n    this.setState({\r\n      loginSuccess: true,\r\n      loginFailed: false,\r\n      toastText: \"Login successfuly!\",\r\n      // Toasts need a unique ID to know when to render\r\n      currentToastID: this.state.currentToastID + 1\r\n    })\r\n  }\r\n\r\n  login() {\r\n    this.props.login(this.state.email, this.state.password).then(() => {\r\n      if(this.props.error) {\r\n        this.createFailureToast()\r\n      } else {\r\n        this.createSuccessToast()\r\n      }\r\n    });\r\n  }\r\n\r\n  emailHandler = (event) => {\r\n    this.setState({ email: event.target.value });\r\n  }\r\n\r\n  passwordHandler = (event) => {\r\n    this.setState({ password: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { redirectToSelection } = this.state;\r\n    \r\n    if(redirectToSelection) {\r\n      return (\r\n        <Redirect to='/select'/>\r\n      )\r\n    }\r\n\r\n    // Create the success and failure toast\r\n    let failureToast = (this.state.loginFailed) ? (\r\n      <Toast type=\"error\" text={this.state.toastText} id={this.state.currentToastID}/>\r\n    ) : undefined;\r\n\r\n    let successToast = (this.state.loginSuccess) ? (\r\n      // Note, the call back will reload page and cause the page to redirect once toast is finished. \r\n      <Toast type=\"success\" text={this.state.toastText} id={this.state.currentToastID} callback={() => this.setState({ redirectToSelection: true })}/>\r\n    ) : undefined;\r\n\r\n    return (\r\n      <div style={style.pageContainer}>\r\n        <form style={style.formContainer}>\r\n          <div style={style.titleContainer}>\r\n            <img\r\n              style={style.logoContainer}\r\n              src={require(\"../../assets/hiss.svg\")}\r\n            />\r\n            <p style={{ fontSize: '18px' }}>by tamuhack</p>\r\n          </div>\r\n          <input\r\n            type='text'\r\n            placeholder='Email'\r\n            value={this.state.email}\r\n            onChange={this.emailHandler}\r\n            style={style.inputContainer}\r\n          />\r\n          <input\r\n            type='password'\r\n            placeholder='Password'\r\n            value={this.state.password}\r\n            onChange={this.passwordHandler}\r\n            style={style.inputContainer}\r\n          />\r\n\r\n          <Button\r\n            onClick={() => this.login()}\r\n            style={{...style.submitContainer, backgroundColor: this.state.submitColor}}\r\n          >\r\n            Login\r\n          </Button>\r\n\r\n          {/* Render Toast (This can go anywhere inside the render. It doesn't have to be at bottom) */}\r\n          {failureToast}\r\n          {successToast}\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst style : { [key: string]: React.CSSProperties } = {\r\n  logoContainer : {\r\n    display: 'flex',\r\n    marginLeft: '-10px',\r\n    height: '56px'\r\n  },\r\n  pageContainer : {\r\n    display: 'flex',\r\n    height: '100vh',\r\n    width: '100vw',\r\n    alignItems: 'center',\r\n  },\r\n  titleContainer: {\r\n    marginTop: '27vh',\r\n    marginBottom: '40px',\r\n    width: '80vw'\r\n  },\r\n  formContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    width: '100vw',\r\n    paddingLeft: '10vw',\r\n    paddingRight: '10vw',\r\n    height: '100vh',\r\n  },\r\n  inputContainer: {\r\n    height: '57px',\r\n    width: '80vw',\r\n    paddingLeft: '4%',\r\n    marginBottom: '3vh',\r\n    fontSize: 17\r\n  },\r\n  submitContainer: {\r\n    height: '57px',\r\n    width: '80vw',\r\n    marginTop: '3vh',\r\n    color: 'white',\r\n    fontSize: 20\r\n  },\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn,\r\n  isLoading: state.auth.isLoading,\r\n  userData: state.auth.userData,\r\n  error: state.auth.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  login: (email:string, password:string) => dispatch(actions.login(email, password))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import axios from 'axios';\r\nimport { AppActions } from '../../types/actions';\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const isLoading = ( loading: boolean ): AppActions => ({\r\n  type: 'LOGIN_ATTEMPT',\r\n  isLoading: loading\r\n});\r\n\r\nexport const loginSuccess = ( userData: object ): AppActions => ({\r\n  type: 'LOGIN_SUCCESS',\r\n  userData\r\n});\r\n\r\nexport const loginFailed = ( error: object ): AppActions => ({\r\n  type: 'LOGIN_FAILED',\r\n  error\r\n});\r\n\r\nexport const logoutComplete = (): AppActions => ({\r\n  type: 'LOGOUT'\r\n});\r\n\r\nexport const logout = () => {\r\n  return (dispatch: Dispatch<AppActions>) => {\r\n    dispatch(logoutComplete());\r\n  }\r\n};\r\n\r\nexport const login = (email: string, password: string) => {\r\n  return (dispatch: Dispatch<AppActions>) => {\r\n    // dispatch(isLoading(true));\r\n\r\n    return axios.post(\r\n      'https://register.tamuhack.com/api/volunteer/login',\r\n      {\r\n         email: email,\r\n         password: password,\r\n      },\r\n      {\r\n         headers: {\r\n           'content-type': 'application/json',\r\n         }\r\n      }\r\n    ).then(response => {\r\n      dispatch(loginSuccess(response));\r\n    }).catch(error => {\r\n      dispatch(loginFailed(error));\r\n    });\r\n  };\r\n};\r\n","import React, { CSSProperties } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport { LoginData, QRData } from '../../types/TypeObjects';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Rodal from 'rodal';\r\nimport 'rodal/lib/rodal.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ninterface IProps {\r\n  userData: LoginData;\r\n  event: string;\r\n  attribute: string;\r\n\r\n  qrData: QRData;\r\n  modalVisible: boolean;\r\n  closeModal: () => void;\r\n}\r\n\r\ninterface IState {\r\n  participantRegistered: boolean;\r\n}\r\n\r\nclass ConfirmModal extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.state = {participantRegistered: false};\r\n  }\r\n\r\n  getRegisteredStatus = async (email: string) => {\r\n    var checkInStatusUrl = \"https://register.tamuhack.com/api/volunteer/summary?email=\" + email;\r\n\r\n    let registeredStatus = false;\r\n    await axios.get(\r\n      checkInStatusUrl,\r\n      {\r\n         headers: {\r\n           'content-type': 'application/json',\r\n           authorization: 'Token ' + this.props.userData.data.token\r\n         },\r\n      }\r\n    ).then(response => {\r\n      registeredStatus = response.data.checked_in;\r\n    }).catch(error => {\r\n      // TODO make a toast\r\n      // API Call failed\r\n      console.log(error);\r\n    });\r\n\r\n    return registeredStatus;\r\n  }\r\n\r\n  checkInUser = async () => {\r\n    const checkInUrl = \"https://register.tamuhack.com/api/volunteer/checkin\";\r\n\r\n    await axios.post(checkInUrl, \r\n      {\r\n        \"email\": this.props.qrData.email\r\n      },\r\n      {\r\n      headers: {\r\n        authorization: \"Token \" + this.props.userData.data.token,\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    }).then(response => {\r\n      this.setState({ participantRegistered: true });\r\n    }).catch(exception => {\r\n      this.setState({participantRegistered: false});\r\n      console.log(exception);\r\n    });\r\n  }\r\n\r\n  async componentDidUpdate() {\r\n    const isRegistered = await this.getRegisteredStatus(this.props.qrData.email);\r\n    this.setState({ participantRegistered: isRegistered });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div style={style.modalContainer}>\r\n        <Rodal \r\n          visible={this.props.modalVisible} \r\n          onClose={this.props.closeModal}\r\n          animation=\"slideUp\"\r\n          width={'70vw'}\r\n          height={350}\r\n          customStyles={{ marginBottom: 0, justifyContent: 'flex-end', paddingLeft: 25, paddingRight: 25 }}\r\n        >\r\n          <div style={style.badgeContainer}>\r\n            <Badge style={{ marginRight: 15, padding: 10, backgroundColor: '#FFD9D9', fontSize: 15 }}>\r\n              {this.props.event ? this.props.event : \"No Event\"}\r\n            </Badge>\r\n            <Badge style={{ padding: 10, backgroundColor: '#D9EFFF', fontSize: 15 }}>\r\n              {this.props.attribute ? this.props.attribute : \"No Attribute\"}\r\n            </Badge>\r\n          </div>\r\n          <div>\r\n            <p style={{ display: 'flex', fontSize: 23, fontWeight: 'bold' }}>{this.props.qrData.first_name} {this.props.qrData.last_name}</p>\r\n          </div>\r\n          <div style={style.emailRow}>\r\n            <p style={{ fontSize: 16, fontWeight: 'bold', margin: 0, paddingLeft: 0}}>\r\n              Email\r\n            </p>\r\n            <p style={{ fontSize: 14, margin: 0 }}>\r\n              {this.props.qrData.email}\r\n            </p>\r\n          </div>\r\n          <div style={{...style.checkInStatusRow, borderColor: this.state.participantRegistered ? '#5CD059' : '#FFBFBF', fontSize: 20}}>\r\n            <p style={{ display: 'flex', margin: 0, padding: 0}}>\r\n              {this.state.participantRegistered ? 'CHECKED IN' : 'NOT CHECKED IN'}\r\n            </p>\r\n          </div>\r\n          <Button\r\n            style={style.confirmButton}\r\n            disabled={this.state.participantRegistered}\r\n            onClick={this.checkInUser}\r\n          >\r\n            Check In\r\n          </Button>\r\n        </Rodal>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n    const style : { [key: string]: React.CSSProperties } = {\r\n        modalContainer: {\r\n            display: 'flex',\r\n            backgroundColor: 'white',\r\n            height: 350,\r\n            padding: 30,\r\n        },\r\n        checkInStatusRow: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            borderWidth: '5px',\r\n            borderStyle: 'solid',\r\n            marginBottom: 50,\r\n            paddingTop: 5,\r\n            paddingBottom: 5\r\n        },\r\n        emailRow: {\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            padding: 0,\r\n            paddingBottom: 10,\r\n            marginBottom: 20,\r\n            borderBottom: '1px #DEDEDE solid',\r\n        },\r\n        confirmButton: {\r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            width: '100%', \r\n            height: '60px', \r\n            backgroundColor: '#FF7C93', \r\n            border: '0', \r\n            fontSize: '18px'\r\n        },\r\n        badgeContainer: {\r\n            display: 'flex', \r\n            flexDirection: 'row', \r\n            paddingBottom: 0, \r\n            marginBottom: 15\r\n        }\r\n    };\r\n\r\n    const mapStateToProps = state => ({\r\n        event: state.selection.event,\r\n        attribute: state.selection.attribute,\r\n        userData: state.auth.userData,\r\n    });\r\n\r\n    export default connect(mapStateToProps)(ConfirmModal);\r\n  ","import Navbar from 'react-bootstrap/Navbar'\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as actions from '../redux/actions/authActions';\r\nimport { connect } from 'react-redux';\r\n\r\n/*\r\n    Props leftIconSrc and rightIconSrc have to match the name exactly of the .svg file in @/src/assets\r\n*/\r\ninterface IProps {\r\n    leftIconSrc? : string;\r\n    rightIconSrc? : string;\r\n    leftRedirectRoute? : string;\r\n    rightRedirectRoute? : string;\r\n    logout: () => void;\r\n    /*\r\n        TODO: Have the sources to redirect when clicked\r\n    */\r\n}\r\n\r\ninterface IState {\r\n    leftRedirect: boolean;\r\n    rightRedirect: boolean;\r\n}\r\n\r\nclass TopNavbar extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {leftRedirect: false, rightRedirect: false};\r\n  }\r\n\r\n  redirect = (redirectRoute: string) => {\r\n    if(redirectRoute === \"/\") {\r\n        this.props.logout();\r\n    }\r\n    return <Redirect to={redirectRoute} />\r\n  }\r\n\r\n  onLeftPress = () => {\r\n    this.setState({ leftRedirect: true });\r\n  }\r\n\r\n  onRightPress = () => {\r\n    this.setState({ rightRedirect: true });\r\n  }\r\n\r\n  render() {\r\n    var {\r\n        leftIconSrc,\r\n        rightIconSrc,\r\n        leftRedirectRoute,\r\n        rightRedirectRoute\r\n    } = this.props;\r\n\r\n    var leftIcon = leftIconSrc ? (\r\n        <img \r\n            alt=\"\"\r\n            src={require(`../assets/${leftIconSrc}.svg`)}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n        />\r\n    ) : undefined\r\n\r\n    var rightIcon = rightIconSrc ? (\r\n        <img \r\n            alt=\"\"\r\n            src={require(`../assets/${rightIconSrc}.svg`)}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n        />\r\n    ) : undefined\r\n\r\n    if (this.state.leftRedirect && this.props.leftRedirectRoute !== undefined) {\r\n        return this.redirect(this.props.leftRedirectRoute);\r\n    }\r\n\r\n    if (this.state.rightRedirect && this.props.rightRedirectRoute !== undefined) {\r\n        return this.redirect(this.props.rightRedirectRoute);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar style={style.navSpacing}>\r\n                <Navbar style={style.navSpacing}>\r\n                    {/* TODO: Update href */}\r\n                    <Navbar.Brand onClick={this.onLeftPress} style={style.logoContainer}>\r\n                        {leftIcon}\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n                <Navbar style={style.navSpacing}>\r\n                    {/* TODO: Update href */}\r\n                    <Navbar.Brand href=\"/#/select\" style={style.logoContainer}>\r\n                    <img\r\n                        alt=\"\"\r\n                        src={require(\"../assets/hiss.svg\")}\r\n                        width=\"30\"\r\n                        height=\"30\"\r\n                        className=\"d-inline-block align-top\"\r\n                    />\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n                <Navbar style={style.navSpacing}>\r\n                    {/* TODO: Update href */}\r\n                    <Navbar.Brand onClick={this.onRightPress} style={style.logoContainer}>\r\n                        {rightIcon}\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst style : { [key: string]: React.CSSProperties } = {\r\n    logoContainer : {\r\n        marginRight: \"0px\",\r\n        width: \"30px\"\r\n    },\r\n    navSpacing: {\r\n        justifyContent: \"space-between\"\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoggedIn: state.auth.isLoggedIn,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    logout: () => dispatch(actions.logout())\r\n});\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopNavbar);\r\n","import React, { CSSProperties } from 'react';\r\nimport axios from 'axios';\r\nimport QrReader from 'react-qr-reader';\r\nimport ConfirmModal from '../ConfirmModal/ConfirmModal';\r\nimport Search from '../Search/Search';\r\nimport { LoginData, QRData } from '../../types/TypeObjects';\r\nimport { connect } from 'react-redux';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Rodal from 'rodal';\r\nimport 'rodal/lib/rodal.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TopNavbar from './../../Components/navbar';\r\n\r\ninterface IProps {\r\n  isLoggedIn: boolean;\r\n  isLoading: boolean;\r\n  userData: LoginData;\r\n  error: string;\r\n  event: string;\r\n  attribute: string;\r\n  login: (email: string, password: string) => Promise<object>;\r\n}\r\n\r\ninterface IState {\r\n  qrData: QRData;\r\n  delay: number;\r\n  frontCamera: boolean;\r\n  confirmVisible: boolean;\r\n}\r\n\r\nclass QRScan extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {qrData: {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      email: \"\",\r\n    },\r\n    delay: 500, \r\n    frontCamera: true, \r\n    confirmVisible: false}\r\n  }\r\n\r\n  handleScan = async (data: string) => {\r\n    if(data === null || this.state.confirmVisible) {\r\n      return;\r\n    }\r\n    try {\r\n      var qrObj = JSON.parse(data);\r\n      if(Object.prototype.hasOwnProperty.call(qrObj, 'email') && \r\n        Object.prototype.hasOwnProperty.call(qrObj, 'first_name') && \r\n        Object.prototype.hasOwnProperty.call(qrObj, 'last_name')) {\r\n\r\n        this.setState({ qrData: qrObj, confirmVisible: true });\r\n      } else {\r\n        console.log(\"QR code has invalid properties!\");\r\n      }\r\n    } catch (exception) {\r\n      console.log(exception)\r\n      // TODO \r\n      // Toast for invalid QR Code\r\n    }\r\n  }\r\n\r\n  handleError = (error) => {\r\n    \r\n  }\r\n\r\n  switchCamera = () => {\r\n    this.setState({frontCamera: !this.state.frontCamera});\r\n  }\r\n\r\n  show = () => {\r\n    this.setState({ confirmVisible: true });\r\n  }\r\n\r\n  hide = () => {\r\n    this.setState({ confirmVisible: false });\r\n  }\r\n\r\n  render() {\r\n    const cameraString = this.state.frontCamera ? 'user' : 'environment';\r\n    return (\r\n      <div>\r\n        <TopNavbar leftIconSrc=\"arrowleft\" rightIconSrc=\"magnifying\" leftRedirectRoute=\"/select\" rightRedirectRoute=\"/search\"/>\r\n        <div style={style.pageContainer}>\r\n          <div>\r\n            <QrReader\r\n              style={{width: '100%', marginBottom: 20, alignItems: 'center', alignSelf: 'center', justifyContent: 'center'}}\r\n              delay={this.state.delay}\r\n              onError={this.handleError}\r\n              onScan={this.handleScan}\r\n              facingMode={cameraString}\r\n            />\r\n            <Button\r\n              style={style.switchCameraContainer}\r\n              onClick={this.switchCamera}>\r\n              Switch\r\n            </Button>\r\n          </div>\r\n          <ConfirmModal \r\n            qrData={this.state.qrData}\r\n            modalVisible={this.state.confirmVisible}\r\n            closeModal={this.hide}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst style : { [key: string]: React.CSSProperties } = {\r\n  pageContainer : {\r\n    display: 'flex',\r\n    height: 'calc(100vh - 72px)',\r\n    width: '100vw',\r\n    alignItems: 'center',\r\n    flexDirection: 'column',\r\n    backgroundColor: 'white',\r\n    paddingTop: '10vh'\r\n  },\r\n  selectionContainer: {\r\n    display: 'flex',\r\n    width: '100vw',\r\n    height: '10vh',\r\n    justifyContent: 'space-around'\r\n  },\r\n  switchCameraContainer: {\r\n    width: '80vw',\r\n  },\r\n  modalContainer: {\r\n    display: 'flex',\r\n    backgroundColor: 'white',\r\n    height: 350,\r\n    padding: 30,\r\n  },\r\n  checkInStatusRow: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '5px solid #5CD059',\r\n    marginBottom: 50,\r\n    paddingTop: 5,\r\n    paddingBottom: 5\r\n  },\r\n  emailRow: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: 10,\r\n    paddingTop: 0,\r\n    marginBottom: 20,\r\n    borderBottom: '1px #DEDEDE solid',\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  event: state.selection.event,\r\n  attribute: state.selection.attribute,\r\n  userData: state.auth.userData,\r\n});\r\n\r\nexport default connect(mapStateToProps)(QRScan);\r\n","import React from 'react';\r\nimport QrReader from 'react-qr-reader';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { AppActions } from '../../types/actions';\r\nimport * as actions from '../../redux/actions/selectionActions';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Select from 'react-select'\r\nimport Button from 'react-bootstrap/Button';\r\nimport TopNavbar from './../../Components/navbar';\r\nimport { throwStatement } from '@babel/types';\r\n\r\n\r\ninterface IProps {\r\n  event: string;\r\n  attribute: string;\r\n  updateSelection: (event: string, attribute: string) => Dispatch<AppActions>;\r\n}\r\n\r\ninterface IState {\r\n  event: string;\r\n  attribute: string;\r\n  redirectToScan: boolean;\r\n}\r\n\r\nclass Selection extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      event: this.props.event,\r\n      attribute: this.props.attribute,\r\n      redirectToScan: false,\r\n    }\r\n  }\r\n\r\n\r\n  // Gets called every time the first select form has an option change.\r\n  eventSelectChange = (option, actions) => {\r\n    var val = option ? option.value : \"\";\r\n    this.setState({\r\n      event: val\r\n    })\r\n  }\r\n\r\n  // Gets called every time the second select form has an option change.\r\n  attributeSelectChange = (option, actions) => {\r\n    var val = option ? option.value : \"\";\r\n    this.setState({\r\n      attribute: val\r\n    })\r\n  }\r\n\r\n  // Using the event state determine what options to return.\r\n  // These will be displayed on the second dropdown\r\n  determineAttributes = () => {\r\n    // TODO\r\n    return [\r\n      { value: 'chocolate', label: 'Attr. C' },\r\n      { value: 'strawberry', label: 'Attr. S' },\r\n      { value: 'vanilla', label: 'Attr. V' }\r\n    ]\r\n  }\r\n\r\n  handleScanSubmit = () => {\r\n    // TODO may have to change logic depending on Event and Attribute\r\n    if(this.state.event !== \"\" && this.state.attribute !== \"\") {\r\n      this.props.updateSelection(this.state.event, this.state.attribute);\r\n      this.setState({ redirectToScan: true });\r\n    }\r\n\r\n    // TODO Alert user about invalid selection\r\n  }\r\n\r\n  render() {\r\n    var {\r\n      event,\r\n      attribute,\r\n      redirectToScan\r\n    } = this.state;\r\n\r\n    if(redirectToScan) {\r\n      return <Redirect to='/scan' />\r\n    }\r\n\r\n    // Hardcoded event options. Will need to be updated\r\n    const eventOptions = [\r\n      { value: 'chocolate', label: 'Chocolate' },\r\n      { value: 'strawberry', label: 'Strawberry' },\r\n      { value: 'vanilla', label: 'Vanilla' }\r\n    ]\r\n\r\n    const attributeOptions = this.determineAttributes()\r\n\r\n    // Formats the individual options in the select tags (react-select)\r\n    const formatGroupLabel = data => (\r\n      <div style={style.groupStyles}>\r\n        <span>{data.label}</span>\r\n        <span style={style.groupBadgeStyles}>{data.options.length}</span>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <TopNavbar leftIconSrc=\"isymbol\" rightIconSrc=\"logout\" leftRedirectRoute=\"/info\" rightRedirectRoute=\"/\" />\r\n        <div style={style.pageContainer}>\r\n          <h2 style={{ fontSize: '36px', color: \"#FF7C93\", marginBottom: \"40px\" }}>\r\n            Select a scan...\r\n          </h2>\r\n\r\n          {/* React-Select component */}\r\n          <Select\r\n            options={eventOptions}\r\n            formatGroupLabel={formatGroupLabel}\r\n            placeholder=\"Event\"\r\n            isClearable={true}\r\n            isSearchable={ false }\r\n            onChange={this.eventSelectChange}\r\n          />\r\n          <br />\r\n\r\n          {/* React-Select component */}\r\n          <Select\r\n            options={attributeOptions}\r\n            formatGroupLabel={formatGroupLabel}\r\n            placeholder=\"Attribute\"\r\n            isClearable={true}\r\n            isDisabled={event == \"\"}\r\n            onChange={this.attributeSelectChange}\r\n            isSearchable={ false }\r\n          />\r\n          <br />\r\n\r\n          <Button block\r\n            style={{border: \"1px solid #FF7C93\", backgroundColor: \"#FF7C93\"}}\r\n            onClick={this.handleScanSubmit}\r\n            disabled={! (event && attribute)}\r\n          >\r\n            Start Scanning\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst style : { [key: string]: React.CSSProperties } = {\r\n\r\n  // Changed, no longer flex and MarginTop is hardcoded\r\n  pageContainer : {\r\n    padding: \"20px\",\r\n    marginTop: \"12vh\",\r\n    width: '100vw',\r\n  },\r\n\r\n  // Default React-Select styles\r\n  groupBadgeStyles: {\r\n    backgroundColor: '#EBECF0',\r\n    borderRadius: '2em',\r\n    color: '#172B4D',\r\n    display: 'inline-block',\r\n    fontSize: 12,\r\n    fontWeight: 'normal',\r\n    lineHeight: '1',\r\n    minWidth: 1,\r\n    width: \"200px;\",\r\n    padding: '0.16666666666667em 0.5em',\r\n    textAlign: 'center',\r\n  },\r\n\r\n  // Default React-Select styles\r\n  groupStyles: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  event: state.selection.event,\r\n  attribute: state.selection.attribute,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateSelection: (event:string, attribute:string) => dispatch(actions.updateSelection(event, attribute))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);\r\n","import { AppActions } from '../../types/actions';\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const selectionSuccess = ( event: string, attribute: string ): AppActions => ({\r\n  type: 'SELECTION_SUCCESS',\r\n  event,\r\n  attribute\r\n});\r\n\r\nexport const updateSelection = (event: string, attribute: string) => {\r\n  return (dispatch: Dispatch<AppActions>) => {\r\n    dispatch(selectionSuccess(event, attribute));\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport axios from 'axios';\r\nimport Toast from './../../Components/toast';\r\nimport TopNavbar from './../../Components/navbar';\r\nimport ConfirmModal from '../ConfirmModal/ConfirmModal';\r\nimport { QRData } from '../../types/TypeObjects';\r\n\r\ninterface IProps {\r\n  event: string;\r\n  token: number\r\n  attribute: string;\r\n}\r\n\r\ninterface IState {\r\n    event: string;\r\n    attribute: string;\r\n\r\n    name: string;\r\n    displayUsers: boolean;\r\n    users: Array<any>;\r\n\r\n    // Added state for the toast\r\n    searchFailed: boolean;\r\n    searchSuccess: boolean;\r\n    currentToastID: number;\r\n    toastText: string;\r\n\r\n    modalVisible: boolean;\r\n    participantData: QRData;\r\n}\r\n\r\nclass Selection extends React.PureComponent<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        event: \"\",\r\n        attribute: \"\",\r\n        name: \"\",\r\n\r\n        displayUsers: false,\r\n        users: [],\r\n        searchFailed: false, \r\n        searchSuccess: false,\r\n        currentToastID: 0, \r\n        toastText: \"\",\r\n\r\n        modalVisible: false,\r\n        participantData: {\r\n          \"email\": \"\",\r\n          \"first_name\": \"\",\r\n          \"last_name\": \"\"\r\n        }\r\n    }\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({ modalVisible: true });\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setState({ modalVisible: false });\r\n  }\r\n  \r\n  setParticipantData = (user) => {\r\n    this.setState({ participantData: user}, () => {\r\n      this.setState({ modalVisible: true });\r\n    });\r\n  }\r\n\r\n  nameHandler = (event) => {\r\n    this.setState({ name: event.target.value });\r\n  }\r\n\r\n  createFailureToast() {\r\n    // Create a new toast by toggling the state\r\n    this.setState({\r\n      searchFailed: true,\r\n      searchSuccess: false,\r\n      toastText: \"Failed to authenticate!\",\r\n      // Toasts need a unique ID to know when to render\r\n      currentToastID: this.state.currentToastID + 1\r\n    })\r\n  }\r\n\r\n  createSuccessToast(responseData) {\r\n    // Create a new toast by toggling the state\r\n    this.setState({\r\n      searchSuccess: true,\r\n      searchFailed: false,\r\n      users: responseData,\r\n      toastText: `Found ${responseData.length} user${responseData.length - 1 ? '': 's'}!`,\r\n      // Toasts need a unique ID to know when to render\r\n      currentToastID: this.state.currentToastID + 1\r\n    })\r\n  }\r\n\r\n  createWarningToast(responseData) {\r\n    // Create a new toast by toggling the state\r\n    this.setState({\r\n      toastText: \"No users found!\",\r\n      searchSuccess: true,\r\n      searchFailed: false,\r\n      users: responseData,\r\n      // Toasts need a unique ID to know when to render\r\n      currentToastID: this.state.currentToastID + 1\r\n    })\r\n  }\r\n\r\n  // TODO\r\n  handlePopup = (user) => {\r\n    console.log(user)\r\n  }\r\n\r\n  // Calls the api/volunteer/search endpoint\r\n  // NOTE: There is no hard cap or limit checking. A person can type \" \" and get every user for instance\r\n  handleSearchSubmit = () => {\r\n    var {\r\n      name,\r\n      event,\r\n      attribute\r\n    } = this.state\r\n\r\n    // Token taken from Redux State\r\n    // This will get reset each server restart. This means you will have to visit the login page again.\r\n    var token = this.props.token\r\n\r\n    if(name && token) {\r\n      return axios.get(\r\n        `https://register.tamuhack.com/api/volunteer/search?q=${name}`,\r\n        {\r\n          headers: {\r\n            'Authorization': `Token ${token}`\r\n          }\r\n        }\r\n      ).then(response => {\r\n        var responseData = response.data.results\r\n        \r\n        // OPTIONAL: Warning toast if there is 0 results found\r\n        responseData.length == 0 ? this.createWarningToast(responseData) : this.createSuccessToast(responseData) \r\n      }).catch(error => {\r\n        this.createFailureToast() \r\n      });\r\n    } else {\r\n      // Same error message as in the .catch tag\r\n      this.createFailureToast() \r\n    }\r\n  }\r\n\r\n  render() {\r\n    var {\r\n        name,\r\n        users\r\n    } = this.state;\r\n\r\n    // Create the failure, success, and warning toast\r\n    let failureToast = (this.state.searchFailed) ? (\r\n        <Toast type=\"error\" text={this.state.toastText} id={this.state.currentToastID}/>\r\n    ) : undefined;\r\n  \r\n    let successToast = (this.state.searchSuccess && users.length != 0) ? (\r\n        <Toast type=\"success\" text={this.state.toastText} id={this.state.currentToastID}/>\r\n    ) : undefined;\r\n  \r\n    let warningToast = (this.state.searchSuccess && users.length == 0) ? (\r\n        <Toast type=\"warning\" text={this.state.toastText} id={this.state.currentToastID}/>\r\n    ) : undefined;\r\n\r\n    return (\r\n      <div>\r\n        <TopNavbar leftIconSrc=\"arrowleft\" leftRedirectRoute=\"/scan\"/>\r\n        <div style={style.pageContainer}>\r\n          <InputGroup className=\"mb-3\">\r\n              <FormControl\r\n                  style={{fontSize: \"18px\"}}\r\n                  placeholder=\"Search User\"\r\n                  onChange={this.nameHandler}\r\n              />\r\n          </InputGroup>\r\n\r\n          <Button block\r\n            style={{border: \"1px solid #FF7C93\", backgroundColor: \"#FF7C93\"}}\r\n            onClick={this.handleSearchSubmit}\r\n            disabled={! (name)}\r\n            size=\"lg\"\r\n          > Search </Button>\r\n          <div style={{marginTop: \"10px\"}}>\r\n              {\r\n                // For each user \r\n                users.map((user, index) => {\r\n                    // Return this HTML \r\n                    return (\r\n                        <div onClick={() => this.setParticipantData(user)} style={{borderTop: \"1px solid black\", padding: \"5px 0px 5px 0px\"}} key={index}>\r\n                            <h5 style={{margin: \"0px\"}}>\r\n                                {user.first_name} {user.last_name}\r\n                                {/* TODO Launch Popup */}\r\n                                <span style={{float: 'right', marginTop: \"4px\"}}>\r\n                                  <svg style={{width: \"40\", height: \"40\"}} viewBox=\"0 0 24 24\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>\r\n                                </span>\r\n                            </h5>\r\n                            <p style={{margin: \"0px\"}}>\r\n                                {user.email}\r\n                            </p>\r\n                        </div>\r\n                    )\r\n                })\r\n              }\r\n          </div>\r\n          <ConfirmModal\r\n            qrData={this.state.participantData}\r\n            modalVisible={this.state.modalVisible}\r\n            closeModal={this.closeModal}\r\n          />\r\n          {/* Render Toast (This can go anywhere inside the render. It doesn't have to be at bottom) */}\r\n          {failureToast}\r\n          {successToast}\r\n          {warningToast}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst style : { [key: string]: React.CSSProperties } = {\r\n  pageContainer : {\r\n    padding: \"20px\",\r\n    marginTop: \"20px\",\r\n    width: '100vw',\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  token: (state.auth.userData.data) ? state.auth.userData.data.token : undefined\r\n  /*event: state.selection.eventName,\r\n  attribute: state.selection.attribute,*/\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  /*login: (email:string, password:string) => dispatch(actions.login(email, password))*/\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);","import React from 'react';\r\nimport { HashRouter, Switch, Route, Router } from 'react-router-dom';\r\nimport Login from './Login/Login';\r\nimport QRScan from './QRScan/QRScan';\r\nimport Selection from './Selection/Selection';\r\nimport Search from './Search/Search';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/'>\r\n        <Switch>\r\n          <Route path={'/scan'} component={QRScan} />\r\n          <Route path={'/select'} component={Selection} />\r\n          <Route path={'/search'} component={Search} />\r\n          <Route path={'/'} component={Login} />\r\n        </Switch>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { AuthActionTypes } from '../../types/actions';\r\n\r\nconst INITIAL_STATE: object = {\r\n  isLoggedIn: false,\r\n  isLoading: false,\r\n  userData: {},\r\n  error: undefined\r\n};\r\n\r\nexport default function auth(state = INITIAL_STATE, action: AuthActionTypes): object {\r\n  switch (action.type) {\r\n    case 'LOGIN_ATTEMPT':\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isLoggedIn: false\r\n      };\r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isLoggedIn: true,\r\n        userData: action.userData,\r\n        error: undefined\r\n      };\r\n    case 'LOGIN_FAILED':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isLoggedIn: false,\r\n        error: action.error\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        userData: {},\r\n        isLoading: false,\r\n        isLoggedIn: false,\r\n        error: undefined\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SelectionActionTypes } from '../../types/actions';\r\n\r\nconst INITIAL_STATE: object = {\r\n  event: \"\",\r\n  attribute: \"\"\r\n};\r\n\r\nexport default function selection(state = INITIAL_STATE, action: SelectionActionTypes): object {\r\n  switch (action.type) {\r\n    case 'SELECTION_SUCCESS':\r\n      return {\r\n        event: action.event,\r\n        attribute: action.attribute\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport auth from './authReducer';\r\nimport selection from './selectionReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  selection\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers/index';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Routes from './Pages/Routes';\r\nimport Login from './Pages/Login/Login';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst ReduxApp = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Routes />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nReactDOM.render(<ReduxApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/hiss.225cb576.svg\";","var map = {\n\t\"./arrowleft.svg\": 99,\n\t\"./arrowright.svg\": 100,\n\t\"./hiss.svg\": 40,\n\t\"./isymbol.svg\": 101,\n\t\"./logout.svg\": 102,\n\t\"./magnifying.svg\": 103\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 57;","module.exports = __webpack_public_path__ + \"static/media/arrowleft.05e4d747.svg\";"],"sourceRoot":""}