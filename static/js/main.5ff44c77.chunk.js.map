{"version":3,"sources":["Pages/QRScan/QRScan.tsx","Pages/Selection/Selection.tsx","Pages/Routes.tsx","serviceWorker.ts","redux/reducers/authReducer.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx"],"names":["QRScan","props","state","qrText","delay","frontCamera","handleScan","bind","handleError","switchCamera","data","console","log","error","this","setState","cameraString","style","pageContainer","selectionContainer","Button","width","height","switchCameraContainer","onClick","alignItems","alignSelf","justifyContent","onError","onScan","facingMode","React","PureComponent","display","flexDirection","backgroundColor","paddingTop","Selection","connect","dispatch","Routes","basename","path","component","Component","Boolean","window","location","hostname","match","INITIAL_STATE","isLoggedIn","isLoading","userData","undefined","rootReducer","combineReducers","auth","action","type","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ff44c77.chunk.js","sourcesContent":["import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport { LoginData } from '../../types/LoginType';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  userData: LoginData;\n  error: string;\n  login: (email: string, password: string) => Promise<object>;\n}\n\ninterface IState {\n  qrText: string;\n  delay: number;\n  frontCamera: boolean;\n}\n\nclass QRScan extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {qrText: \"\", delay: 500, frontCamera: true}\n    this.handleScan = this.handleScan.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.switchCamera = this.switchCamera.bind(this);\n  }\n\n  handleScan(data) {\n    console.log(data);\n  }\n\n  handleError(error) {\n    console.log(error);\n  }\n\n  switchCamera() {\n    console.log(!this.state.frontCamera);\n    this.setState({frontCamera: !this.state.frontCamera});\n  }\n\n  render() {\n    const cameraString = this.state.frontCamera ? 'user' : 'environment';\n    return (\n      <div style={style.pageContainer}>\n        <div style={style.selectionContainer}>\n          <Button style={{width: '40vw', height: '5vh'}}>Event</Button>\n          <Button style={{width: '40vw', height: '5vh'}}>Attribute</Button>\n        </div>\n        <Button\n          style={style.switchCameraContainer}\n          onClick={this.switchCamera}>\n          Switch\n        </Button>\n        <QrReader\n          style={{width: '100%', alignItems: 'center', alignSelf: 'center', justifyContent: 'center'}}\n          delay={this.state.delay}\n          onError={this.handleError}\n          onScan={this.handleScan}\n          facingMode={cameraString}\n        />\n      </div>\n    );\n  }\n}\n\nconst style : { [key: string]: React.CSSProperties } = {\n  pageContainer : {\n    display: 'flex',\n    height: '100vh',\n    width: '100vw',\n    alignItems: 'center',\n    flexDirection: 'column',\n    backgroundColor: 'black',\n    paddingTop: '10vh'\n  },\n  selectionContainer: {\n    display: 'flex',\n    width: '100vw',\n    height: '10vh',\n    justifyContent: 'space-around'\n  },\n  switchCameraContainer: {\n\n  }\n};\n\nexport default QRScan;\n","import React from 'react';\nimport QrReader from 'react-qr-reader';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions/authActions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface IProps {\n  event: string;\n  attribute: string;\n}\n\ninterface IState {\n  event: string;\n  attribute: string;\n}\n\nclass Selection extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div style={style.pageContainer}>\n        Hello!\n      </div>\n    );\n  }\n}\n\nconst style : { [key: string]: React.CSSProperties } = {\n  pageContainer : {\n    display: 'flex',\n    height: '100vh',\n    width: '100vw',\n    alignItems: 'center',\n  },\n};\n\nconst mapStateToProps = state => ({\n  /*event: state.selection.eventName,\n  attribute: state.selection.attribute,*/\n});\n\nconst mapDispatchToProps = dispatch => ({\n  /*login: (email:string, password:string) => dispatch(actions.login(email, password))*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Selection);\n","import React from 'react';\nimport { HashRouter, Switch, Route, Router } from 'react-router-dom';\nimport Login from './Login/Login';\nimport QRScan from './QRScan/QRScan';\nimport Selection from './Selection/Selection';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path={'/test'} component={Selection} />\n          <Route path={'/'} component={QRScan} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AuthActionTypes } from '../../types/actions';\n\nconst INITIAL_STATE: object = {\n  isLoggedIn: false,\n  isLoading: false,\n  userData: {},\n  error: undefined\n};\n\nexport default function auth(state = INITIAL_STATE, action: AuthActionTypes): object {\n  console.log(action.type);\n  switch (action.type) {\n    case 'LOGIN_ATTEMPT':\n      return {\n        ...state,\n        isLoading: true,\n        isLoggedIn: false\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: true,\n        userData: action.userData,\n        error: undefined\n      };\n    case 'LOGIN_FAILED':\n      return {\n        ...state,\n        isLoading: false,\n        isLoggedIn: false,\n        error: action.error\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        userData: {},\n        isLoading: false,\n        isLoggedIn: false\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './authReducer';\n\nconst rootReducer = combineReducers({\n  auth\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './Pages/Routes';\nimport Login from './Pages/Login/Login';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nconst ReduxApp = () => {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  )\n}\n\nReactDOM.render(<ReduxApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}